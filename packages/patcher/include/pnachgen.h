#pragma once
#include "types.h"
#include <string>
#include <map>

class PnachGenerator
{
public:
    PnachGenerator(std::string title, std::string author, std::string comment)
        : _title(title), _author(author), _comment(comment) {}

    PnachGenerator() = default;

    /**
     * @brief Generates a pnach that writes the added bytes to their respective addresses.
     *
     * @return The generated pnach as a string.
     */
    std::string generate();

    /**
     * @brief Adds a set of bytes to be written at the specified address.
     *
     * @param bytes The bytes to write.
     * @param address The address to write the bytes to.
     */
    void addBytes(const Bytes& bytes, uintptr_t address);

private:
    std::string _title = "Generated Macro";
    std::string _author = "Velcro Patcher";
    std::string _comment = "Generated by Velcro Patcher";

    std::map<Bytes, uint32_t> _patches;

    /**
     * @brief Generates the header for the pnach.
     *
     * @return The generated header as a string.
     */
    std::string generateHeader();

    /**
     * @brief Generates a 32-bit write patch.
     *
     * Writes the 32-bit value V to the address A.
     * patch=1,EE,2AAAAAAA,extended,VVVVVVVV
     */
    std::string generate32bitWrite(uintptr_t address, uint32_t value);
};
